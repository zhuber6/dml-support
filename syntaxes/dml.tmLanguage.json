{
    "fileTypes": [
        "dml"
    ],
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Simics Device Modeling Language (DML)",
    "patterns": [
        {
            "include": "#comment"
        },
        {
            "include": "#operator"
        },
        {
            "include": "#control"
        },
        {
            "include": "#constant"
        },
        {
            "include": "#number"
        },
        {
            "include": "#string"
        },
        {
            "include": "#type"
        },
        {
            "include": "#global"
        },
        {
            "include": "#declaration"
        },
        {
            "include": "#function-call"
        },
        {
            "include": "#assembly"
        },
        {
            "include": "#uncheckedBlock"
        },
        {
            "include": "#punctuation"
        }
    ],
    "repository": {
        "comment": {
            "patterns": [
                {
                    "include": "#comment-line"
                },
                {
                    "include": "#comment-block"
                }
            ]
        },
        "comment-line": {
            
            "begin": "(?<!tp:)//",
            "end": "$",
            "name": "comment.line.dml",
            "patterns": [
                {
                    "include": "#comment-todo"
                }
            ]
        },
        "comment-block": {
            "begin": "/\\*",
            "end": "\\*/",
            "name": "comment.block.dml",
            "patterns": [
                {
                    "include": "#comment-todo"
                }
            ]
        },
        "operator": {
            "patterns": [
                {
                    "include": "#operator-logic"
                },
                {
                    "include": "#operator-arithmetic"
                },
                {
                    "include": "#operator-binary"
                },
                {
                    "include": "#operator-assignment"
                }
            ]
        },
        "operator-logic": {
            "match": "(==|<(?!<)|<=|>(?!>)|>=|\\&\\&|\\|\\||\\:(?!=)|\\?)",
            "name": "keyword.operator.logic.dml"
        },
        "operator-arithmetic": {
            "match": "(\\+|\\-|\\/|\\*)",
            "name": "keyword.operator.arithmetic.dml"
        },
        "operator-binary": {
            "match": "(\\^|\\&|\\||<<|>>)",
            "name": "keyword.operator.binary.dml"
        },
        "operator-assignment": {
            "match": "(\\:?=)",
            "name": "keyword.operator.assignment.dml"
        },
        "control": {
            "patterns": [
                {
                    "include": "#control-flow"
                },
                {
                    "include": "#control-using"
                },
                {
                    "include": "#control-import"
                },
                {
                    "include": "#control-underscore"
                },
                {
                    "include": "#control-other"
                }
            ]
        },
        "control-flow": {
            "match": "\\b(if|else|for|while|do|break|returns?)\\b",
            "name": "keyword.control.flow.dml"
        },
        "control-using": {
            "match": "\\b(using)\\b",
            "name": "keyword.control.using.dml"
        },
        "control-import": {
            "match": "\\b(import)\\b",
            "name": "keyword.control.import.dml"
        },
        "control-underscore": {
            "match": "\\b(_)\\b",
            "name": "constant.other.underscore.dml"
        },
        "control-other": {
            "match": "\\b(parameter|loggroup)\\b",
            "name": "keyword.control.dml"
        },
        "constant": {
            "patterns": [
                {
                    "include": "#constant-boolean"
                },
                {
                    "include": "#constant-ucase"
                }
            ]
        },
        "constant-boolean": {
            "match": "\\b(true|false)\\b",
            "name": "constant.language.boolean.dml"
        },
        "constant-ucase": {
            "match": "\\b([A-Z0-9_]+)\\b",
            "name": "constant.language.ucase.dml"
        },
        "number": {
            "patterns": [
                {
                    "include": "#number-decimal"
                },
                {
                    "include": "#number-hex"
                }
            ]
        },
        "number-decimal": {
            "match": "\\b(\\d+(\\.\\d+)?)\\b",
            "name": "constant.numeric.decimal.dml"
        },
        "number-hex": {
            "match": "\\b(0[xX][a-fA-F0-9]+)\\b",
            "name": "constant.numeric.hexadecimal.dml"
        },
        "string": {
            "patterns": [
                {
                    "match": "\\\".*?\\\"",
                    "name": "string.quoted.double.dml"
                },
                {
                    "match": "\\'.*?\\'",
                    "name": "string.quoted.single.dml"
                }
            ]
        },
        "type": {
            "patterns": [
                {
                    "include": "#type-primitive"
                }
            ]
        },
        "type-primitive": {
            "match": "\\b(char|int\\d*|uint\\d*|bool|local)\\b",
            "name": "support.type.primitive.dml"
        },
        "global": {
            "patterns": [
                {
                    "include": "#global-variables"
                },
                {
                    "include": "#global-functions"
                }
            ]
        },
        "global-variables": {
            "patterns": [
                
                {
                    "match": "\\b(this)\\b",
                    "name": "variable.language.this.dml"
                },
                {
                    "match": "\\b(super)\\b",
                    "name": "variable.language.super.dml"
                },
                {
                    "match": "\\b(abi)\\b",
                    "name": "variable.language.builtin.abi.dml"
                },
                {
                    "match": "\\b(tx\\.origin|tx\\.gasprice|msg\\.data|msg\\.sig|msg\\.value)\\b",
                    "name": "variable.language.transaction.security.dml"
                },
                {
                    "match": "\\b(msg\\.sender|msg|block|tx|now)\\b",
                    "name": "variable.language.transaction.dml"
                }
            ]
        },
        "global-functions": {
            "patterns": [
                {
                    "match": "\\b(require|assert|revert)\\b",
                    "name": "keyword.control.exceptions.dml"
                },
                {
                    "match": "\\b(SIM_)\\b",
                    "name": "support.function.math.dml"
                }
            ]
        },
        "declaration": {
            "patterns": [
                {
                    "include": "#declaration-contract"
                },
                {
                    "include": "#declaration-interface"
                },
                {
                    "include": "#declaration-library"
                },
                {
                    "include": "#declaration-visibility"
                },
                {
                    "include": "#declaration-struct"
                },
                {
                    "include": "#declaration-event"
                },
                {
                    "include": "#declaration-enum"
                },
                {
                    "include": "#declaration-function-fallback"
                },
                {
                    "include": "#declaration-function-receive"
                },
                {
                    "include": "#declaration-function"
                },
                
                {
                    "include": "#declaration-constructor"
                },
                {
                    "include": "#declaration-modifier"
                }
            ]
        },
        "declaration-device": {
            "patterns": [
                {
                    "match": "\\b(device)(\\s+([A-Za-z_]\\w*))?\\b",
                    "captures": {
                        "1": {
                            "name": "storage.type.device.dml"
                        },
                        "3": {
                            "name": "entity.name.type.device.dml"
                        }
                    }
                }
            ]
        },
        "declaration-bank": {
            "match": "\\b(bank)(\\s+([A-Za-z_]\\w*))?\\b",
            "captures": {
                "1": {
                    "name": "storage.type.bank.dml"
                },
                "3": {
                    "name": "entity.name.type.bank.dml"
                }
            }
        },
        "declaration-register": {
            "match": "\\b(register)(\\s+([A-Za-z_]\\w*))?\\b",
            "captures": {
                "1": {
                    "name": "storage.type.register.dml"
                },
                "3": {
                    "name": "entity.name.type.register.dml"
                }
            }
        },
        "declaration-field": {
            "match": "\\b(field)(\\s+([A-Za-z_]\\w*))?\\b",
            "captures": {
                "1": {
                    "name": "storage.type.field.dml"
                },
                "3": {
                    "name": "entity.name.type.field.dml"
                }
            }
        },
        "declaration-attribute": {
            "match": "\\b(attribute)(\\s+([A-Za-z_]\\w*))?\\b",
            "captures": {
                "1": {
                    "name": "storage.type.attribute.dml"
                },
                "3": {
                    "name": "entity.name.type.attribute.dml"
                }
            }
        },
        "declaration-template": {
            "match": "\\b(template)(\\s+([A-Za-z_]\\w*))?\\b",
            "captures": {
                "1": {
                    "name": "storage.type.template.dml"
                },
                "3": {
                    "name": "entity.name.type.template.dml"
                }
            }
        },
        "declaration-interface": {
            "match": "\\b(interface)(\\s+([A-Za-z_]\\w*))?\\b",
            "captures": {
                "1": {
                    "name": "storage.type.interface.dml"
                },
                "3": {
                    "name": "entity.name.type.interface.dml"
                }
            }
        },
        "declaration-connect": {
            "match": "\\b(connect)(\\s+([A-Za-z_]\\w*))?\\b",
            "captures": {
                "1": {
                    "name": "storage.type.connect.dml"
                },
                "3": {
                    "name": "entity.name.type.connect.dml"
                }
            }
        },
        "declaration-port": {
            "match": "\\b(port)(\\s+([A-Za-z_]\\w*))?\\b",
            "captures": {
                "1": {
                    "name": "storage.type.port.dml"
                },
                "3": {
                    "name": "entity.name.type.port.dml"
                }
            }
        },
        "declaration-struct": {
            "match": "\\b(struct)(\\s+([A-Za-z_]\\w*))?\\b",
            "captures": {
                "1": {
                    "name": "storage.type.struct.dml"
                },
                "3": {
                    "name": "entity.name.type.struct.dml"
                }
            }
        },
        "declaration-event": {
            "match": "\\b(event)(\\s+([A-Za-z_]\\w*))?\\b",
            "captures": {
                "1": {
                    "name": "storage.type.event.dml"
                },
                "3": {
                    "name": "entity.name.type.event.dml"
                }
            }
        },
        "declaration-enum": {
            "match": "\\b(enum)(\\s+([A-Za-z_]\\w*))?\\b",
            "captures": {
                "1": {
                    "name": "storage.type.enum.dml"
                },
                "3": {
                    "name": "entity.name.type.enum.dml"
                }
            }
        },
        "declaration-method": {
            "begin": "\\b(method)\\s+([A-Za-z_]\\w*)\\b",
            "beginCaptures": {
                "1": {
                    "name": "storage.type.method.dml"
                },
                "2": {
                    "name": "entity.name.method.dml"
                }
            },
            "end": "({)",
            "endCaptures": {
                "1": {
                    "name": "punctuation.block.dml"
                }
            },
            "patterns": [
                {
                    "include": "#method-head"
                }
                
            ]
        },
        "declaration-visibility": {
            "patterns": [
                {
                    "match": "\\b(private|internal|constant|pure|view|nonpayable|indexed)\\b",
                    "name": "storage.type.modifier.keyword.dml"
                },
                {
                    "match": "\\b(public|external|payable|inherited|storage|memory|calldata)\\b",
                    "name": "storage.type.modifier.keyword.extendedscope.dml"
                }
            ]
        },
        "method-head": {
            "patterns": [
                {
                    "include": "#punctuation"
                },
                {
                    "include": "#comment"
                },
                {
                    "include": "#control"
                },
                {
                    "include": "#constant"
                },
                {
                    "include": "#number"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#type"
                },
                {
                    "include": "#global"
                },
                {
                    "include": "#declaration"
                }
            ]
        },
        "function-call": {
            "match": "\\b([A-Za-z_]\\w*)\\s*\\(",
            "captures": {
                "1": {
                    "name": "entity.name.function.dml"
                }
            }
        },
        "punctuation": {
            "patterns": [
                {
                    "match": ";",
                    "name": "punctuation.terminator.statement.dml"
                },
                {
                    "match": "\\.",
                    "name": "punctuation.accessor.dml"
                },
                {
                    "match": ",",
                    "name": "punctuation.separator.dml"
                },
                {
                    "match": "({|})",
                    "name": "punctuation.block.dml"
                }
            ]
        },
        "comment-todo": {
            "match": "(?i)\\b(FIXME|TODO|CHANGED|XXX|IDEA|HACK|NOTE|REVIEW|NB|BUG|QUESTION|COMBAK|TEMP|SUPPRESS|LINT|\\w+-disable|\\w+-suppress)\\b(?-i)",
            "name": "keyword.comment.todo.dml"
        }
    },
    "scopeName": "source.dml"
}